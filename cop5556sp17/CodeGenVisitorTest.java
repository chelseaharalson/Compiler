
package cop5556sp17;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}
	
	boolean devel = false;
	boolean grade = true;
	
	@Before
	public void initLog() {
		if (devel || grade) PLPRuntimeLog.initLog();
	}

	@After
	public void printLog() {
		System.out.println(PLPRuntimeLog.getString());
	}
	

	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void prog1() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog1";
		String input = progname + " {integer i \n integer a \n integer b \n a <- 10; \n b <- 15; \n i <- a + b;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "101525";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}

	@Test
	public void prog2() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog2";
		String input = progname + " {integer a \n integer b \n a <- 22; \n b <- 2; \n while(a > b){b <- b * 2;} \n if(b == 32){b <- 1;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "2224816321";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog3() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog3";
		String input = progname + " {integer i \n i <- 5; \n if(true){i <- 10;} \n integer b \n b <- i;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "51010";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog4() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog4";
		String input = progname + " {integer i \n i <- 5; \n if(true){integer i \n i <- 10;} \n integer b \n b <- i;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "5105";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog5() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog5";
		//should print 115
		String input = progname + " integer a, boolean b, boolean b2 {integer c if(b){c <- 5 + a;} if(b2){c <- 10 + a;} a <- 5;}";//c should = 11
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"1", "false", "true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "115";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog6() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog6";
		//should print 115
		String input = progname + " integer a{"//expect 00false1true2false1true3false2true4false3true5false4true
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		boolean b b <- false; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "00false1true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog7() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog7";
		//should print 115
		String input = progname + " integer a, boolean b{"//expect 001true2false1true3false2true4false3true5false4true
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "001true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog8() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog8";
		//should print 115
		String input = progname + " integer a, boolean b{"//expect 5001true2false1true3false2true4false3true5false4true
				+ "		integer a a <- 5; "
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "5001true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog9() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog9";
		//should print 115
		String input = progname + " integer a, boolean b{"//expect 5001true2false1true3false2true4false3true5false4true
				+ "		a <- 5; "
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "5001true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog10() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog10";
		//should print 115
		String input = progname + " integer a, integer a2, integer a3, boolean b{"//expect 1true2false1true3false2true4false3true5false4true
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "0", "0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "1true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog11() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog11";
		//should print 115
		String input = progname + " integer a, integer a2, integer a3, boolean b{"//expect 1true2true3true4true5true
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				boolean b"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "0", "0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "1true2true3true4true5true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog12() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog12";
		//should print 115
		String input = progname + "{"//expect 500false1true2false1true3false2true4false3true5false4true
				+ "		integer a a <- 5;"
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		boolean b b <- false; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "500false1true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog13() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog13";
		//should print 115
		String input = progname + "{"//expect 50236
				+ "		integer a a <- 5;"
				+ "		integer b b <- 0;"
				+ "		integer ans"
				+ "		if(a == b){"
				+ "			ans <- 1;"
				+ "		}"
				+ "		if(a != b){"
				+ "			ans <- 2;"
				+ "		}"
				+ "		if(a > b){"
				+ "			ans <- 3;"
				+ "		}"
				+ "		if(a < b){"
				+ "			ans <- 4;"
				+ "		}"
				+ "		if(a <= b){"
				+ "			ans <- 5;"
				+ "		}"
				+ "		if(a >= b){"
				+ "			ans <- 6;"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "50236";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog14() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog14";
		//should print 115
		String input = progname + "{"//expect 55156
				+ "		integer a a <- 5;"
				+ "		integer b b <- 5;"
				+ "		integer ans"
				+ "		if(a == b){"
				+ "			ans <- 1;"
				+ "		}"
				+ "		if(a != b){"
				+ "			ans <- 2;"
				+ "		}"
				+ "		if(a > b){"
				+ "			ans <- 3;"
				+ "		}"
				+ "		if(a < b){"
				+ "			ans <- 4;"
				+ "		}"
				+ "		if(a <= b){"
				+ "			ans <- 5;"
				+ "		}"
				+ "		if(a >= b){"
				+ "			ans <- 6;"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "55156";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	    
		instance.run();
	}
	
	@Test
	public void prog15() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog15";
		//should print 115
		String input = progname + "{"//expect truefalse236
				+ "		boolean a a <- true;"
				+ "		boolean b b <- false;"
				+ "		integer ans"
				+ "		if(a == b){"
				+ "			ans <- 1;"
				+ "		}"
				+ "		if(a != b){"
				+ "			ans <- 2;"
				+ "		}"
				+ "		if(a > b){"
				+ "			ans <- 3;"
				+ "		}"
				+ "		if(a < b){"
				+ "			ans <- 4;"
				+ "		}"
				+ "		if(a <= b){"
				+ "			ans <- 5;"
				+ "		}"
				+ "		if(a >= b){"
				+ "			ans <- 6;"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "truefalse236";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog16() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog16";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog17() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog17";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog18() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog18";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog19() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog19";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog20() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog20";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog21() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog21";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog22() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog22";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog23() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog23";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog24() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog24";
		String input = progname + " {integer a \n integer b \n a <- 22; \n b <- 3; \n if(b%2 == 1){b <- 1;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "2231";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog25() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog25";
		String input = progname + " {integer a \n integer b \n a <- 22; \n b <- 2; \n if(b%2 == 0){b <- 1;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "2221";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog26() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog26";
		String input = progname + " {sleep(5);}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog27() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog27";
		//String input = progname + " file in, file out{image i \n in -> i; i -> out;} ";	
		//String input = progname + " file in, file out{image i \n in -> i -> out;} ";	
		String input = progname + " file in, file out{image i \n in -> i; \n integer h \n i -> height -> h; \n integer test \n test <- h;} ";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)3072";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog28() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog28";
		String input = progname + " file in, file out{image i \n in -> i; \n i -> gray -> out;} ";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)grayOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog29() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog29";
		String input = progname + " file in, file out{image i \n in -> i; \n i -> convolve -> out;} ";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)convolvewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog30() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog30";
		String input = progname + " file in, file out{image i \n in -> i; \n i -> blur -> out;} ";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)blurOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog31() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog31";
		//String input = progname + " file in, file out{image i \n in -> i; i -> out;} ";	
		//String input = progname + " file in, file out{image i \n in -> i -> out;} ";	
		String input = progname + " file in, file out{image i \n in -> i; \n integer w \n i -> width -> w; \n integer test \n test <- w;} ";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)2146";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog32() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog32";
		String input = progname + " file in {image i  frame f in -> i; i -> f; sleep(5); f -> show; sleep(5);\n f -> hide; f -> move(100,200) -> show; sleep(5);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)createOrSetFrameshowImagehideImagemoveFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog33() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog33";
		//String input = progname + " file in, file out{image i \n in -> i; i -> out;} ";	
		//String input = progname + " file in, file out{image i \n in -> i -> out;} ";	
		String input = progname + " file in, file out {image i in -> i; i -> out; }";	
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)write(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}

	@Test
	public void prog34() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog34";
		//String input = progname + " file in, file out{image i \n in -> i; i -> out;} ";	
		//String input = progname + " file in, file out{image i \n in -> i -> out;} ";	
		String input = progname + " file in, file out {image i \n in -> i -> out; i -> gray -> out;}";	
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG","/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)write(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)grayOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog35() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog35";	
		String input = progname + " file in, file in2, file out {image i in -> i; image i2 in2 -> i2; image i3 i3 <- i + i2; i3 -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Vancouver9.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Vancouver9.JPG)addcopyImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog36() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog36";	
		String input = progname + " file in, file in2, file out {image i in -> i; image i2 in2 -> i2; image i3 i3 <- i - i2; i3 -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Vancouver9.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Vancouver9.JPG)subcopyImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog37() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog37";	
		String input = progname + " file in, file out {image i in -> i; integer int int <- 2; image i2 i2 <- i * int; i2 -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)2mulcopyImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog38() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog38";	
		String input = progname + " file in, file out {image i in -> i; integer int int <- 2; image i2 i2 <- i / int; i2 -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)2divcopyImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog39() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog39";	
		String input = progname + " file in, file out {image i in -> i; integer int int <- 2; image i2 i2 <- i % int; i2 -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)2modcopyImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog40() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog40";	
		String input = progname + " file in, file out {image i in -> i; integer int int <- 2; image i2 i2 <- int * i; i2 -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)2mulcopyImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/OregonTEST1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog41() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog41";
		String input = progname + " file in {image i frame f in -> i; i-> scale(2) ->i; i -> f; f -> show; sleep(5);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)scalecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog42() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog42";
		String input = progname + " file in {image i frame f in -> i; i -> f; f -> show; sleep(5); integer x integer y integer test f -> xloc -> x; f -> yloc -> y; test <- x; test <- y; f -> move(100, 200); f -> xloc -> x; f -> yloc -> y; test <- x; test <- y;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)createOrSetFrameshowImagegetXgetY00moveFramegetXgetY100200";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog43() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog43";
		String input = progname + " url in, file out {image i in -> i; i -> gray -> out;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog44() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog44";
		String input = progname + " {integer i i <- screenheight; i <- screenwidth;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getScreenHeight800getScreenWidth1280";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog45() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog45";
		String input = progname + " file in {image i frame f in -> i; i -> f; integer x x <- 500; integer y y <- 600; f -> move(x, y); f -> show; sleep(5);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)createOrSetFrame500600moveFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog46() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog46";
		String input = progname + " file in {image i frame f in -> i; i -> f; integer x x <- screenwidth-100; integer y y <- screenheight-100; f -> move(x, y); f -> show; sleep(5);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)createOrSetFramegetScreenWidth1180getScreenHeight700moveFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog47() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog47";
		String input = progname + " url u, file f {image i u->blur->i->f;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)blurOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog48() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog48";
		String input = progname + " url u, file f {integer int int <- 5; image i u->blur->i->f; sleep(int);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)5readFromURL(http://i.imgur.com/O75rAPi.jpg)blurOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog49() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog49";
		String input = progname + " url u, file f {integer int int <- 2; image i u->scale(int)->i->f;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)2readFromURL(http://i.imgur.com/O75rAPi.jpg)scalewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog50() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog50";
		String input = progname + " file in {image i \n in -> i; \n i |-> gray; i -> in;} ";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)grayOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	/*@Test
	public void prog51() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog51";
		String input = progname + " file in {image i \n in -> i; \n i |-> blur; i -> in;} ";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)copyImagecopyImageblurOpwrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void prog52() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog52";
		String input = progname + " file in {image i \n in -> i; \n i |-> convolve; i -> in;} ";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)copyImagecopyImageconvolvewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}*/
	
	@Test
	public void prog53() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog53";
		//should print 115
		String input = progname + " integer f1, integer f2 {\n integer i f1->i; i->f2;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "2"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    //assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog54() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog54";
		String input = progname + " integer f1, integer f2 {\n integer i i <- f1; f2 <- i;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5","2"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    //assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void subImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "subImage";
		String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)subcopyImagecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void readFromURLandWriteToFile2() throws Exception {
		//scan, parse, and type check the program
		String progname = "readFromURLandWriteToFile2";
		String input = progname + " url u, \nfile out \n{image i frame f \nu -> gray -> i;\n i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpcreateOrSetFrameshowImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void sleepImg() throws Exception {
		//scan, parse, and type check the program
		String progname = "sleepImg";
		String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)convolvecreateOrSetFrameshowImage42";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void addImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "addImage";
		String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5; k <- k + i; k -> f -> show; \n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void convolveImg() throws Exception {
		//scan, parse, and type check the program
		String progname = "convolveImg";
		String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)convolvecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void readFromURLandDisplay() throws Exception {
		//scan, parse, and type check the program
		String progname = "readFromURLandDisplay";
		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void imgMove2() throws Exception {
		//scan, parse, and type check the program
		String progname = "imgMove2";
		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagegetScreenWidth1280getScreenHeight800moveFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void subImage2() throws Exception {
		//scan, parse, and type check the program
		String progname = "subImage2";
		String input = progname + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)subcopyImagecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void modImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "modImage";
		String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)modcopyImagecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void allTheOps() throws Exception {
		//scan, parse, and type check the program
		String progname = "allTheOps";
		String input = progname + " file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)grayOpconvolveblurOpcreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void readFromURLandDisplayDisplay2() throws Exception {
		//scan, parse, and type check the program
		String progname = "readFromURLandDisplayDisplay2";
		String input = progname + " url u {image i frame f \nu -> i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void readFromURLandWriteToFile() throws Exception {
		//scan, parse, and type check the program
		String progname = "readFromURLandWriteToFile";
		String input = progname + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void blurImg() throws Exception {
		//scan, parse, and type check the program
		String progname = "blurImg";
		String input = progname + " url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)blurOpcreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void grayImg() throws Exception {
		//scan, parse, and type check the program
		String progname = "grayImg";
		String input = progname + " url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpcreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void divImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "divImage";
		String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)divcopyImagecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void readFromURLandWriteScaledImageToFile() throws Exception {
		//scan, parse, and type check the program
		String progname = "readFromURLandWriteScaledImageToFile";
		String input = progname + " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)scalecreateOrSetFrameshowImagewrite(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/TestUrl.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void readFromFile() throws Exception {
		//scan, parse, and type check the program
		String progname = "readFromFile";
		String input = progname + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "readFromFile(/Users/chelseametcalf/Documents/workspace3/PLPHomework/bin/Oregon1.JPG)createOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void barArrowGray() throws Exception {
		//scan, parse, and type check the program
		String progname = "barArrowGray";
		String input = progname + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpcreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void assignImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "assignImage";
		String input = progname + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)copyImagecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void scaleImage() throws Exception {
		//scan, parse, and type check the program
		String progname = "scaleImage";
		String input = progname + " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void imgMove() throws Exception {
		//scan, parse, and type check the program
		String progname = "imgMove";
		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	
	@Test
	public void assignImageAndFrame() throws Exception {
		//scan, parse, and type check the program
		String progname = "assignImageAndFrame";
		String input = progname + " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImagecopyImage";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
}
