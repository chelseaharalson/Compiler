
package cop5556sp17;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}
	
	boolean devel = false;
	boolean grade = true;
	
	@Before
	public void initLog() {
		if (devel || grade) PLPRuntimeLog.initLog();
	}

	@After
	public void printLog() {
		System.out.println(PLPRuntimeLog.getString());
	}
	

	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void prog1() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog1";
		String input = progname + " {integer i \n integer a \n integer b \n a <- 10; \n b <- 15; \n i <- a + b;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "101525";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}

	@Test
	public void prog2() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog2";
		String input = progname + " {integer a \n integer b \n a <- 22; \n b <- 2; \n while(a > b){b <- b * 2;} \n if(b == 32){b <- 1;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "2224816321";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog3() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog3";
		String input = progname + " {integer i \n i <- 5; \n if(true){i <- 10;} \n integer b \n b <- i;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "51010";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog4() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog4";
		String input = progname + " {integer i \n i <- 5; \n if(true){integer i \n i <- 10;} \n integer b \n b <- i;}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "5105";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog5() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog5";
		//should print 115
		String input = progname + " integer a, boolean b, boolean b2 {integer c if(b){c <- 5 + a;} if(b2){c <- 10 + a;} a <- 5;}";//c should = 11
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"1", "false", "true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "115";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog6() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog6";
		//should print 115
		String input = progname + " integer a{"//expect 00false1true2false1true3false2true4false3true5false4true
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		boolean b b <- false; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "00false1true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog7() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog7";
		//should print 115
		String input = progname + " integer a, boolean b{"//expect 001true2false1true3false2true4false3true5false4true
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "001true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog8() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog8";
		//should print 115
		String input = progname + " integer a, boolean b{"//expect 5001true2false1true3false2true4false3true5false4true
				+ "		integer a a <- 5; "
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "5001true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog9() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog9";
		//should print 115
		String input = progname + " integer a, boolean b{"//expect 5001true2false1true3false2true4false3true5false4true
				+ "		a <- 5; "
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "5001true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog10() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog10";
		//should print 115
		String input = progname + " integer a, integer a2, integer a3, boolean b{"//expect 1true2false1true3false2true4false3true5false4true
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "0", "0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "1true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog11() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog11";
		//should print 115
		String input = progname + " integer a, integer a2, integer a3, boolean b{"//expect 1true2true3true4true5true
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				boolean b"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "0", "0", "false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "1true2true3true4true5true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog12() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog12";
		//should print 115
		String input = progname + "{"//expect 500false1true2false1true3false2true4false3true5false4true
				+ "		integer a a <- 5;"
				+ "		integer a2 a2 <- 0; "
				+ "		integer a3 a3 <- 0; "
				+ "		boolean b b <- false; "
				+ "		while(a2 != a){"
				+ "			a2 <- (a2 + 1);"
				+ "			if(b == true){"
				+ "				b <- false;"
				+ "				a3 <- (a3 + 1);"
				+ "			}"
				+ "			if(b == false){"
				+ "				b <- true;"
				+ "			}"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "500false1true2false1true3false2true4false3true5false4true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog13() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog13";
		//should print 115
		String input = progname + "{"//expect 50236
				+ "		integer a a <- 5;"
				+ "		integer b b <- 0;"
				+ "		integer ans"
				+ "		if(a == b){"
				+ "			ans <- 1;"
				+ "		}"
				+ "		if(a != b){"
				+ "			ans <- 2;"
				+ "		}"
				+ "		if(a > b){"
				+ "			ans <- 3;"
				+ "		}"
				+ "		if(a < b){"
				+ "			ans <- 4;"
				+ "		}"
				+ "		if(a <= b){"
				+ "			ans <- 5;"
				+ "		}"
				+ "		if(a >= b){"
				+ "			ans <- 6;"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "50236";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog14() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog14";
		//should print 115
		String input = progname + "{"//expect 55156
				+ "		integer a a <- 5;"
				+ "		integer b b <- 5;"
				+ "		integer ans"
				+ "		if(a == b){"
				+ "			ans <- 1;"
				+ "		}"
				+ "		if(a != b){"
				+ "			ans <- 2;"
				+ "		}"
				+ "		if(a > b){"
				+ "			ans <- 3;"
				+ "		}"
				+ "		if(a < b){"
				+ "			ans <- 4;"
				+ "		}"
				+ "		if(a <= b){"
				+ "			ans <- 5;"
				+ "		}"
				+ "		if(a >= b){"
				+ "			ans <- 6;"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "55156";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	    
		instance.run();
	}
	
	@Test
	public void prog15() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog15";
		//should print 115
		String input = progname + "{"//expect truefalse236
				+ "		boolean a a <- true;"
				+ "		boolean b b <- false;"
				+ "		integer ans"
				+ "		if(a == b){"
				+ "			ans <- 1;"
				+ "		}"
				+ "		if(a != b){"
				+ "			ans <- 2;"
				+ "		}"
				+ "		if(a > b){"
				+ "			ans <- 3;"
				+ "		}"
				+ "		if(a < b){"
				+ "			ans <- 4;"
				+ "		}"
				+ "		if(a <= b){"
				+ "			ans <- 5;"
				+ "		}"
				+ "		if(a >= b){"
				+ "			ans <- 6;"
				+ "		}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "truefalse236";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog16() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog16";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog17() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog17";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog18() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog18";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog19() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog19";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog20() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog20";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog21() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog21";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a&b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog22() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog22";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-true; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"true"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "true10";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog23() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog23";
		//should print 115
		String input = progname + " boolean a {boolean b integer c b<-false; if(a|b){c<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"false"}; //create command line argument array to initialize params		
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "false";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog24() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog24";
		String input = progname + " {integer a \n integer b \n a <- 22; \n b <- 3; \n if(b%2 == 1){b <- 1;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "2231";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog25() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog25";
		String input = progname + " {integer a \n integer b \n a <- 22; \n b <- 2; \n if(b%2 == 0){b <- 1;}}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "2221";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}
	
	@Test
	public void prog26() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog26";
		String input = progname + " {sleep(5);}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		PLPRuntimeLog.initLog();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		
		String expOut = "";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
		
		instance.run();
	}

}
